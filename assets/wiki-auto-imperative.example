// source
// https://github.com/OliverJAsh/autocomplete-comparison

let previousXhr;
function makeGetWithCancel(url) {
  // * * * * * * * * *
  // 5. switchMap
  // * * * * * * * * *
  if (previousXhr) {
    // cancel previous request
    previousXhr.abort();
    previousXhr = null;
  }
  // 6 make xhr request
  const xhr = new XMLHttpRequest();
  //
  previousXhr = xhr;
  xhr.open('GET', url, true);
  xhr.send();
  return new Promise((resolve, reject) => {
    xhr.onload = () => resolve(xhr);
    xhr.onerror = () => reject(xhr);
  });
}

function searchWikipedia(term) {
  const cleanTerm = global.encodeURIComponent(term);
  const url = 'https://en.wikipedia.org/w/api.php?' +
    'action=opensearch&format=json&search=' +
    cleanTerm +
    '&origin=*';
  return makeGetWithCancel(url)
    // * * * * * * * * *
    // 7. map
    // * * * * * * * * *
    .then(xhr => JSON.parse(xhr.response))
    // * * * * * * * *
    // 8. can't filter promise stream. Hope for the best????
    // * * * * * * * * *
    // 9. map
    // * * * * * * * * *
    .then(data => data[1]);
}

let previousValue;
function searchDistinctUntilChanged(value) {
  // * * * * * * * * *
  // 4. distinctUntilChanged
  // * * * * * * * * *
  if (value !== previousValue) {
    previousValue = value;
    return searchWikipedia(value);
  }
  return null;
}

function search(value, cb) {
  // maybePromise may be a promise or null
  const maybePromise = searchDistinctUntilChanged(value);
  if (!maybePromise) {
    return null;
  }
  return maybePromise.then(x => cb(null, x)).catch(cb);
}

const debouncedSearch = _.debounce(search, 500);

class FooComponent extends React.Componenti {
  onChange(e) {
    // * * * * * *
    // 1. map
    // * * * * * *
    const text = e.target.value;
    // * * * * * *
    // 2. filter
    // * * * * * *
    if (text.length <= 2) {
      return null;
    }
    // * * * * * *
    // 3. debounce
    // * * * * * *
    return debouncedSearch(text, (results) => {
      this.setState({ results });
    });
  }

  render() {
    return (
      <input
        onChange={ this.onChange }
      />
    );
  }
}
